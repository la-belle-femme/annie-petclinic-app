pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub_cred')
        DOCKERHUB_USERNAME = 'bettysami'
        SONARQUBE_SERVER = 'sonar'
        TRIVY_VERSION = '0.34.0'
        SONAR_TOKEN = credentials('sonar')
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/la-belle-femme/annie-petclinic-app.git'
            }
        }
        stage('Prepare Maven Wrapper') {
            steps {
                sh 'chmod +x ${WORKSPACE}/petclinic-docker/mvnw'
            }
        }
        stage('Build Docker Image for SonarQube Scanner') {
            steps {
                script {
                    dir("${WORKSPACE}/petclinic-docker/sonarqube") {
                        sh "docker build -t ${DOCKERHUB_USERNAME}/sonar:${BUILD_NUMBER} ."
                    }
                }
            }
        }
        stage('SonarQube Scan') {
            steps {
                script {
                    withSonarQubeEnv('sonar') {
                        sh """
                            docker run --rm \
                            -e SONAR_HOST_URL=http://34.230.91.74:9000 \
                            -e SONAR_TOKEN=${SONAR_TOKEN} \
                            -v "${WORKSPACE}/petclinic-docker:/usr/src" \
                            ${DOCKERHUB_USERNAME}/sonar:${BUILD_NUMBER} \
                            sonar-scanner \
                            -Dsonar.projectKey=annie-petclinic \
                            -Dsonar.sources=/usr/src \
                            -Dsonar.java.binaries=/usr/src/target/classes \
                            -Dsonar.java.libraries=/usr/src/**/*.jar \
                            -X
                        """
                    }
                }
            }
        }
        stage('Build Docker Image for Application') {
            steps {
                script {
                    dir("${WORKSPACE}/petclinic-docker") {
                        sh "docker build -t ${DOCKERHUB_USERNAME}/petclinic_ui:${BUILD_NUMBER} -f Dockerfile.multi ."
                    }
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                script {
                    def trivyStatus = sh(script: """
                        wget https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
                        tar zxvf trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
                        ./trivy image --exit-code 0 --severity HIGH,CRITICAL ${DOCKERHUB_USERNAME}/petclinic_ui:${BUILD_NUMBER}
                    """, returnStatus: true)

                    if (trivyStatus != 0) {
                        echo "Vulnerabilities found. Check the Trivy scan results."
                    }
                }
            }
        }
        stage('Push to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_cred', passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')]) {
                        sh """
                            echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
                            docker push ${DOCKERHUB_USERNAME}/petclinic_ui:${BUILD_NUMBER}
                            docker logout
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            sh "docker rmi ${DOCKERHUB_USERNAME}/petclinic_ui:${BUILD_NUMBER} || true"
            sh "docker rmi ${DOCKERHUB_USERNAME}/sonar:${BUILD_NUMBER} || true"
            sh "rm -f trivy*"
        }
        failure {
            echo "Pipeline failed"
        }
        success {
            echo "Pipeline succeeded"
        }
    }
}